import * as utils from "../utils.js";
import fetch from "node-fetch";
export class Pages {
    /*
        Type Structure Help

        QueryParams
        {
            datastoreName: string,
            scope: string,
            AllScopes: boolean,
            limit: string,
            prefix: string,
            cursor: string
        }

        Headers
        {
            x-api-key
        }

        Response Data
        {
            keys: ItemData[],
            nextPageCursor: string | null
        }

        ItemData
        {
            key: string,
            scope: string
        }
    */
    constructor(keyName, rawUrl, params, headers) {
        /**
         * Whether or not the current page is the last page available.
         */
        this.isFinished = false;
        this.rawUrl = rawUrl;
        this.params = params;
        this.headers = headers;
        this.keyName = keyName;
    }
    async GetCurrentPageAsync() {
        // Have we gotten our first page yet?
        if (!this.params.cursor) {
            // Get the initial/first page
            await this.AdvanceToNextPageAsync();
            return this.keys;
        }
        return this.keys;
    }
    /**
     * Iterates to the next page in the pages object, if possible.
     */
    async AdvanceToNextPageAsync() {
        if (this.isFinished)
            throw Error("Next page was not found");
        const url = utils.buildUrl(this.rawUrl, this.params);
        const response = await fetch(url, {
            method: "get",
            headers: this.headers
        });
        if (response.status !== 200) {
            return Promise.reject({
                status: response.status,
                statusText: response.statusText
            });
        }
        const data = utils.parseJSON(await response.text());
        // Update the keys
        const newKeys = data[this.keyName];
        if (newKeys) {
            this.keys = newKeys;
        }
        if (!data.nextPageCursor) {
            this.isFinished = true;
            return;
        }
        // Go to the next page via cursor
        this.params.cursor = data.nextPageCursor;
        return;
    }
}
//# sourceMappingURL=pages.js.map