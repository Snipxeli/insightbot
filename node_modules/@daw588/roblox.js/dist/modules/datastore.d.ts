import type { int32, int64 } from "../types/misc/datatypes.js";
import type { SortDirection } from "../types/misc/custom.js";
import type { Response } from "node-fetch";
import type * as QueryParams from "../types/endpoints/datastore/query-params.js";
import type * as ResponseJSON from "../types/endpoints/datastore/response-json.js";
import { Pages } from "./pages.js";
import { Universe } from "../index.js";
import * as utils from "../utils.js";
export declare class DataStoreKeyInfo {
    readonly createdTime: number;
    readonly version: string;
    private readonly userIds;
    private readonly metadata;
    constructor(response: Response);
    GetUserIds(): number[];
    GetMetadata(): utils.Params;
}
export declare class DataStoreSetOptions {
    metadata: Record<string, string>;
    constructor(metadata: Record<string, string>);
    GetMetadata(): Record<string, string>;
    SetMetadata(metadata: Record<string, string>): void;
}
export declare class DataStoreOptions {
    allScopes: boolean;
}
/**
 * Lets you store data that needs to persist between sessions,
 * such as items in a player's inventory or skill points. DataStores
 * are shared per experience, so any place in an experience, including
 * places on different servers, can access and change the same data.
 */
export declare class DataStore {
    readonly universe: Universe;
    readonly name: string;
    readonly scope: string;
    readonly options: DataStoreOptions;
    private readonly url;
    /**
     * @param universe Universe from which DataStore will be retrieved.
     * @param name Name of the data store.
     * @param scope A string specifying the scope.
     */
    constructor(universe: Universe, name: string, scope?: string, options?: DataStoreOptions);
    /**
     * This function returns the latest value of the provided key and a `DataStoreKeyInfo` class.
     * If the key does not exist or if the latest version has been marked as deleted, both return values will be `null`.
     * @param key The key name for which the value is requested.
     * @returns The value of the entry in the data store with the given key and a `DataStoreKeyInfo`
     * class that includes the version number, date and time the version was created, and functions to retrieve UserIds and metadata.
     */
    GetAsync<CustomDataType>(key: string): Promise<[CustomDataType, DataStoreKeyInfo]>;
    /**
     * This function sets the latest value, UserIds, and metadata for the given key.
     *
     * **Metadata definitions must always be updated with a value, even if there are no changes to the current value; otherwise the current value will be lost.**
     * @param key Key name for which the value should be set.
     * @param value The value that the data store key will be set to.
     * @param userIds Table of `UserIds`, highly recommended to assist with GDPR tracking/removal.
     * @param options Class that allows for metadata specification on the key.
     * @returns The version identifier of the newly created version
     */
    SetAsync<CustomDataType>(key: string, value: CustomDataType, userIds?: int64[], options?: DataStoreSetOptions): Promise<string>;
    /**
     * This function increments the value of a key by the provided amount (both must be integers).
     * @param key Key name for which the value should be updated.
     * @param delta Amount to increment the current value by.
     * @param userIds A table of `UserIds` to associate with the key.
     * @param options Class that combines multiple additional parameters as custom metadata and allows for future extensibility.
     * @returns The updated value of the entry in the data store with the given key.
     */
    IncrementAsync<CustomDataType>(key: string, delta: int32, userIds?: int64[], options?: DataStoreSetOptions): Promise<[CustomDataType, DataStoreKeyInfo]>;
    /**
     * This function marks the specified key as deleted by creating a new "tombstone" version of the key.
     * @param key Key name to be removed.
     * @returns The value of the data store prior to deletion and a `DataStoreKeyInfo` class.
     */
    RemoveAsync(key: string): Promise<[unknown, DataStoreKeyInfo]>;
    /**
     * This function returns a `DataStoreKeyPages` object for enumerating through keys of a data store.
     * It accepts an optional `prefix` parameter to only locate keys whose names start with the provided `prefix`.
     * @param prefix Prefix to use for locating keys.
     * @param pageSize Number of items to be returned in each page.
     * @returns A `DataStoreKeyPages` instance that enumerates the keys as DataStoreKey instances.
     */
    ListKeysAsync(prefix?: string, pageSize?: int32): Promise<Pages<QueryParams.ListEntries, import("../types/endpoints/datastore/headers.js").XApiKey, ResponseJSON.EntryKeyInfo>>;
    /**
     * This function enumerates versions of the specified key in either ascending or descending order specified by a SortDirection parameter.
     * It can optionally filter the returned versions by minimum and maximum timestamp.
     * @param key Key name for the versions to list.
     * @param sortDirection Sort order of the versions.
     * @param minDate Date after which the versions should be listed.
     * @param maxDate Date up to which the versions should be listed.
     * @param pageSize Number of items to be returned in each page.
     * @returns A `DataStoreVersionPages` class that enumerates all the versions of the key as `DataStoreObjectVersionInfo` classes.
     */
    ListVersionsAsync(key: string, sortDirection?: SortDirection, minDate?: int64, maxDate?: int64, pageSize?: int32): Promise<Pages<QueryParams.ListEntryVersions, import("../types/endpoints/datastore/headers.js").XApiKey, ResponseJSON.EntryVersionInfo>>;
    /**
     * This function retrieves the specified key version as well as a `DataStoreKeyInfo` instance.
     * @param key Key name for which the version info is requested.
     * @param version Version number of the key for which the version info is requested.
     * @returns The value of the entry in the data store with the given key and a `DataStoreKeyInfo`
     * class that includes the version number, date and time the version was created, and functions to retrieve UserIds and metadata.
     */
    GetVersionAsync<CustomDataType>(key: string, version: string): Promise<(DataStoreKeyInfo | CustomDataType)[]>;
}
//# sourceMappingURL=datastore.d.ts.map