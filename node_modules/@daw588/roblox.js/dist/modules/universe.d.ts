import { int64, int32 } from "../types/misc/datatypes.js";
import type * as DataStoreQueryParams from "../types/endpoints/datastore/query-params.js";
import type * as DataStoreResponseJSON from "../types/endpoints/datastore/response-json.js";
import { Pages } from "./pages.js";
/**
 * Universe is a collection of places, often referred
 * to as a game or an experience.
 */
export declare class Universe {
    readonly id: int64;
    readonly apiKey: string;
    /**
     * @param id Universe's id. Do not mistake it for place id.
     * @param apiKey API key; is used to authenticate API calls made to the universe.
     */
    constructor(id: int64, apiKey: string);
    /**
     * Returns a `DataStoreListingPages` class for enumerating through all of the universe's data stores.
     * It accepts an optional prefix parameter to only locate data stores whose names start with the provided prefix.
     * @param prefix Prefix to enumerate data stores that start with the given prefix.
     * @param pageSize Number of items to be returned in each page.
     * @returns `DataStoreListingPages` class containing `DataStoreInfo` objects that provide details such as name, creation time, ~~and time last updated~~.
     */
    ListDataStoresAsync(prefix?: string, pageSize?: int32): Promise<Pages<DataStoreQueryParams.ListDataStores, import("../types/endpoints/datastore/headers.js").XApiKey, DataStoreResponseJSON.DataStoreInfo>>;
    /**
     * This function sends the provided message to all subscribers to the topic,
     * triggering their registered callbacks to be invoked.
     *
     * Same as MessagingService:PublishAsync()
     * @param topic Determines where the message is sent.
     * @param message The data to include in the message.
     */
    PublishMessageAsync(topic: string, message: string): Promise<string>;
}
//# sourceMappingURL=universe.d.ts.map