import { int32 } from "../../misc/datatypes.js";
declare type Prefix = {
    /**
     * Return only data stores with this prefix.
     */
    prefix?: string;
};
declare type Cursor = {
    /**
     * Provide to request the next set of data.
     *
     * **The format of cursor strings is not defined. You should not interpret or parse them as they may change at any time.**
     */
    cursor?: string;
};
declare type Limit = {
    /**
     * Maximum number of items to return.
     */
    limit?: int32;
};
declare type DataStoreName = {
    /**
     * Name of the data store.
     */
    datastoreName: string;
};
declare type Scope = {
    /**
     * Defaults to global, similar to Lua API.
     */
    scope?: string;
};
declare type EntryKey = {
    /**
     * The key which identifies the entry.
     *
     * *Roblox's documentation does not state whether its required or not, so for now its marked as required.*
     */
    entryKey: string;
};
declare type MatchVersion = {
    /**
     * Only update if current version matches this. Default: `null`.
     */
    matchVersion?: string;
};
declare type ExclusiveCreate = {
    /**
     * Only create the entry if it does not exist. Default: `false`.
     */
    exclusiveCreate?: boolean;
};
declare type IncrementBy = {
    /**
     * The amount by which the entry should be incremented, or the starting value if it does not exist.
     */
    incrementBy?: int32;
};
declare type StartTime = {
    /**
     * Time string in (ISO datetime, UTC) format. Don't consider versions older than this.
     */
    startTime?: string;
};
declare type EndTime = {
    /**
     * Time string in (ISO datetime, UTC) format. Don't consider versions younger than this.
     */
    endTime?: string;
};
declare type SortOrder = {
    /**
     * Either Ascending (older first) or Descending (younger first).
     */
    sortOrder?: string;
};
declare type VersionId = {
    /**
     * The version to inspect.
     */
    versionId: string;
};
declare type AllScopes = {
    /**
     * If true, return keys from all scopes.
     */
    AllScopes?: boolean;
};
export declare type ListDataStores = Prefix & Limit & Cursor;
export declare type ListEntries = DataStoreName & Scope & AllScopes & Prefix & Limit & Cursor;
export declare type GetEntry = DataStoreName & Scope & EntryKey;
/**
 * **Note: You cannot use both matchVersion and exclusiveCreate.**
 */
export declare type SetEntry = DataStoreName & Scope & EntryKey & MatchVersion & ExclusiveCreate;
export declare type IncrementEntry = DataStoreName & Scope & EntryKey & IncrementBy;
export declare type DeleteEntry = DataStoreName & Scope & EntryKey;
export declare type ListEntryVersions = Limit & Cursor & DataStoreName & Scope & EntryKey & StartTime & EndTime & SortOrder;
export declare type GetEntryVersion = DataStoreName & Scope & EntryKey & VersionId;
export {};
//# sourceMappingURL=query-params.d.ts.map